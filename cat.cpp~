#include "cat.h"
#include "gamedata.h"
#include "frameFactory.h"

void Cat::advanceFrame(Uint32 ticks) {
	timeSinceLastFrame += ticks;
	if (timeSinceLastFrame > frameInterval) {
    currentFrame = (currentFrame+1) % numberOfFrames;
		timeSinceLastFrame = 0;
	}
}

Cat::Cat( const std::string& name) :
  Drawable(name, 
           Vector2f(Gamedata::getInstance().getXmlInt("tipiCat/loc/x"), 
                    Gamedata::getInstance().getXmlInt("tipiCat/loc/y")), 
           Vector2f(Gamedata::getInstance().getXmlInt("tipiCat/speedX"),
                    Gamedata::getInstance().getXmlInt("tipiCat/speedY"))
           ),
  frames( FrameFactory::getInstance().getFrames(name) ),
  worldWidth(Gamedata::getInstance().getXmlInt("world/width")),
  worldHeight(Gamedata::getInstance().getXmlInt("world/height")),
  currentFrame(0),
  numberOfFrames( Gamedata::getInstance().getXmlInt(name+"/frames") ),
  frameInterval( Gamedata::getInstance().getXmlInt(name+"/frameInterval") ),
  timeSinceLastFrame( 0 ),
  frameWidth(frames[0]->getWidth()),
  frameHeight(frames[0]->getHeight()),
  hasMoved(false)
{ }

Cat::Cat(const Cat& s) :
  Drawable(s), 
  frames(s.frames),
  worldWidth( s.worldWidth ),
  worldHeight( s.worldHeight ),
  currentFrame(s.currentFrame),
  numberOfFrames( s.numberOfFrames ),
  frameInterval( s.frameInterval ),
  timeSinceLastFrame( s.timeSinceLastFrame ),
  frameWidth( s.frameWidth ),
  frameHeight( s.frameHeight ),
  hasMoved(s.hasMoved)
  { }

void Cat::draw() const { 
  Uint32 x = static_cast<Uint32>(X());
  Uint32 y = static_cast<Uint32>(Y());
  frames[currentFrame]->draw(x, y);
}

void Cat::update(Uint32 ticks) { 
  advanceFrame(ticks);

  Vector2f incr = getVelocity() * static_cast<float>(ticks) * 0.001;
  setPosition(getPosition() + incr);

  if ( Y() < 0) {
    velocityY( abs( velocityY() ) );
  }
  if ( Y() > worldHeight-frameHeight) {
    velocityY( -abs( velocityY() ) );
  }

  if ( X() < 0) {
    velocityX( abs( velocityX() ) );
  }
  if ( X() > worldWidth-frameWidth) {
    velocityX( -abs( velocityX() ) );
  }  

}

void Cat::play(const int moveIn){
	//bool hasMoved = false ;
	if(moveIn == 1){
		setVelocity(Vector2f(Gamedata::getInstance().getXmlInt("tipiCat/speedX"),
		            Gamedata::getInstance().getXmlInt("tipiCat/speedJ"))) ;
		hasMoved = true ;
	}
	else if (moveIn == -1 && hasMoved == true){
		 //std::cout << Y() << std::endl;
		if(Y() < 450){
			setVelocity(Vector2f(Gamedata::getInstance().getXmlInt("tipiCat/speedX"),
				    -1*Gamedata::getInstance().getXmlInt("tipiCat/speedJ"))) ;
		}
		else{
			setVelocity(Vector2f(Gamedata::getInstance().getXmlInt("tipiCat/speedX"),
				    0)) ;
		}
	}
}
